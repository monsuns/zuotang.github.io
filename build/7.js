(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{388:function(n,r){n.exports='\n\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1544809648282&di=ec308f39dd0da28df03245447be85921&imgtype=0&src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fitem%2F201412%2F04%2F20141204151458_TE52s.thumb.700_0.jpeg)\n\n# 程序员的 Markdown\n\n### 使用插件\n\n- [react-markdown](https://github.com/rexxars/react-markdown) react 的 markdown 显示组件\n- [highlight](https://highlightjs.org/) Web 的语法突出显示\n- [mermaid](https://mermaidjs.github.io/) 生成流程图\n- [chart](https://www.chartjs.org/docs/) 生成图表，线图，箱体图等\n- [react-emoji-render](https://github.com/tommoor/react-emoji-render) Emoji 表情包\n\n#### 待添加\n\n> [http://asciimath.org/](http://asciimath.org/) 算法公式\n\n---\n\n## Markdown\n\n使用 react-markdown 插件，通过传入 renderers 道具可以方便定制自己的渲染，这里只做一些简单的演示，具体可以查看我的[blog 源码](https://github.com/zuotang/MyBlog/tree/master/src/components/markdown)。\n把 markdown 封装成组件，方便复用.\ncom/Markdown.jsx\n\n```js\nimport ReactMarkdown from \'react-markdown\';\n\nfunction Markdown({children, ...props}) {\n  return <ReactMarkdown>{children}</ReactMarkdown>;\n}\n```\n\n编写自定义渲染元素，具体参考[nodeTypes](https://github.com/rexxars/react-markdown#node-types)。一个对象，值为 react 组件\ncom/renders.jsx\n\n```js\n//流程图\nimport Graph from \'./Graph\';\n//代码块\nimport Code from \'./Code\';\n//图表\nimport Chat from \'./Chat\';\n//表情包\nimport Emoji from \'react-emoji-render\';\n\nconst renderers = {\n  text: props => <Emoji text={props.children} />,\n  code: props => {\n    switch (props.language) {\n      case \'mermaid\':\n        return <Graph {...props} />;\n      case \'chart\':\n        return <Chart {...props} />;\n      default:\n        return <Code {...props} />;\n    }\n  },\n  link: props => <a href={props.href}>{props.children}</a>,\n};\n```\n\n### Emoji\n\n使用\'react-emoji-render\'插件，只需要把内容传入 text 道具即可\n\n### Chart\n\n```js\nimport React, {useEffect, useRef} from \'react\';\nimport Chart from \'chart.js\';\n\nfunction Chart(props) {\n  let chartRef = useRef();\n  useEffect(() => {\n    var ctx = chartRef.current.getContext(\'2d\');\n    new Chart(ctx, JSON.parse(props.value));\n  });\n  return <canvas ref={chartRef} id="myChart" width="400" height="400" />;\n}\n```\n\n### Code\n\n代码高亮插件\n\n```js\nimport React, {useEffect, useRef} from \'react\';\nimport hljs from \'highlight.js\';\nimport \'highlight.js/styles/atom-one-dark.css\';\n\nfunction Code(props) {\n  let codeRef = useRef();\n  useEffect(() => {\n    hljs.highlightBlock(codeRef.current);\n  });\n  return (\n    <pre>\n      <code ref={codeRef} className={`language-${props.language}`}>\n        {props.value}\n      </code>\n    </pre>\n  );\n}\n```\n\n### Graph\n\n流程图组件， 每次 render 都生成一个新的 name，让热加载时可以刷新显示。\n\n```js\nimport React from \'react\';\nimport mermaid from \'mermaid\';\nimport SnackbarContent from \'@material-ui/core/SnackbarContent\';\n\n// 语法错误处理\nfunction ErrorSnackBar({message}) {\n  // 使用material-ui提示组件\n  return <SnackbarContent message={message} />;\n}\n\nfunction Graph(props) {\n  try {\n    mermaid.parse(props.value);\n  } catch (err) {\n    return <ErrorSnackBar message={err.str} />;\n  }\n  // 每次生成一个新的name，热加载时可以刷新显示\n  let name = parseInt(Math.random() * 10000);\n  let html = mermaid.render(`graph_${name}`, props.value);\n  return <div dangerouslySetInnerHTML={{__html: html}} />;\n}\n```\n\n---\n\n# 效果展示\n\n## Emoji: :panda_face: :sparkles: :camel: :boom: :pig:\n\n[emoji 参考](https://www.webpagefx.com/tools/emoji-cheat-sheet/)\n\n### Mermaid\n\n```mermaid\ngraph TD;\n    A--\x3eB;\n    A--\x3eC;\n    B--\x3eD;\n    C--\x3eD;\n\n```\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->John: Hello John, how are you?\n    loop Healthcheck\n        John->John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail...\n    John--\x3eAlice: Great!\n    John->Bob: How about you?\n    Bob--\x3eJohn: Jolly good!\n```\n\n### Chart\n\n```chart\n{\n  "type": "bar",\n  "data": {\n  "labels": [\n    "Red",\n    "Blue",\n    "Yellow",\n    "Green",\n    "Purple",\n    "Orange"\n  ],\n  "datasets": [\n    {\n    "label": "# of Votes",\n    "data": [\n      12,\n      19,\n      3,\n      5,\n      2,\n      3\n    ],\n    "backgroundColor": [\n      "rgba(255, 99, 132, 0.2)",\n      "rgba(54, 162, 235, 0.2)",\n      "rgba(255, 206, 86, 0.2)",\n      "rgba(75, 192, 192, 0.2)",\n      "rgba(153, 102, 255, 0.2)",\n      "rgba(255, 159, 64, 0.2)"\n    ],\n    "borderColor": [\n      "rgba(255,99,132,1)",\n      "rgba(54, 162, 235, 1)",\n      "rgba(255, 206, 86, 1)",\n      "rgba(75, 192, 192, 1)",\n      "rgba(153, 102, 255, 1)",\n      "rgba(255, 159, 64, 1)"\n    ],\n    "borderWidth": 1\n    }\n  ]\n  },\n  "options": {}\n}\n```\n'}}]);